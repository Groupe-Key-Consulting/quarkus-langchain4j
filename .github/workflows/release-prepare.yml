name: Quarkiverse Prepare Release

on:
  pull_request:
    types: [ closed ]
    paths:
      - '.github/project.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    name: Prepare Release
    if: ${{github.event.pull_request.merged == true}}

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        name: Create GitHub App Token
        with:
          app-id: ${{ vars.CI_APP_ID }}
          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Configure Git author
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'

      - uses: radcortez/project-metadata-action@main
        name: Retrieve project metadata
        id: metadata
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          metadata-file-path: '.github/project.yml'
          local-file: true

      - name: Set environment variables
        run: |
          echo "CURRENT_VERSION=${{steps.metadata.outputs.current-version}}" >> $GITHUB_ENV
          echo "NEXT_VERSION=${{steps.metadata.outputs.next-version}}" >> $GITHUB_ENV

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 23 # use 23 so we can support running the Llama3 module on anything 21+
          cache: 'maven'

      - name: Detect Maven Executable
        run: |
          echo "MAVEN_EXEC=./mvnw" >> $GITHUB_ENV

      - name: Update latest release version in docs
        if: ${{ hashFiles('docs/pom.xml') != '' }}
        run: |
          $MAVEN_EXEC -B -ntp -pl docs -am package -DskipTests -DskipITs -Denforcer.skip -Dformatter.skip -Dimpsort.skip
          if [[ `git status --porcelain` ]]; then
            git commit -a -m "Update the latest release version ${{env.CURRENT_VERSION}} in documentation"
          fi

      - name: Bump .md files to ${{env.CURRENT_VERSION}}
        run: |
          find -name '*.md' -exec sed -i 's/${{env.NEXT_VERSION}}/${{env.CURRENT_VERSION}}/g' {} +
          find -name '*.md' -exec sed -i 's|raw.githubusercontent.com/${{ github.repository }}/main|raw.githubusercontent.com/${{ github.repository }}/${{env.CURRENT_VERSION}}|g' {} +
          if [[ `git status --porcelain` ]]; then
            git commit -a -m "Bump .md files to ${{env.CURRENT_VERSION}}"
          fi

      - name: Update dependency versions for the samples
        run: |
          while IFS= read -r -d '' pom
          do
          $MAVEN_EXEC org.codehaus.mojo:versions-maven-plugin:2.16.2:set-property -Dproperty=quarkus-langchain4j.version -DnewVersion=${{steps.metadata.outputs.current-version}}  -f "$(dirname "$pom")";
          done  <   <(find samples/ -name pom.xml -print0)          
          git commit -a -m "Update dependencies in samples"

      - name: Maven release ${{env.CURRENT_VERSION}}
        run: |
          $MAVEN_EXEC -B release:prepare -Prelease -Dgpg.skip=true -DreleaseVersion=${CURRENT_VERSION} -DdevelopmentVersion=${NEXT_VERSION} -Darguments="-Dgpg.skip=true -DprepareRelease=true" -DprepareRelease=true
          $MAVEN_EXEC -B release:clean

      - name: Bump .md files to ${{env.NEXT_VERSION}}
        run: |
          find -name '*.md' -exec sed -i 's|raw.githubusercontent.com/${{ github.repository }}/${{env.CURRENT_VERSION}}|raw.githubusercontent.com/${{ github.repository }}/main|g' {} +
          find -name '*.md' -exec sed -i 's/${{env.CURRENT_VERSION}}/${{env.NEXT_VERSION}}/g' {} +
          if [[ `git status --porcelain` ]]; then
            git commit -a -m "Bump .md files to ${{env.NEXT_VERSION}}"
          fi

      - name: Push changes to ${{github.base_ref}} branch and tag ${{env.CURRENT_VERSION}}
        run: |
          git push
          git push origin ${CURRENT_VERSION}

      - name: Output release version
        id: out
        run: |
          echo "release-version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "next-version=${NEXT_VERSION}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: gh release create ${CURRENT_VERSION} --generate-notes --latest=${LATEST_RELEASE} --prerelease=${PRE_RELEASE}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          PRE_RELEASE: ${{ steps.metadata.outputs.pre-release == 'true' }}
          LATEST_RELEASE: ${{ !steps.metadata.outputs.latest || (steps.metadata.outputs.latest == 'true') }}
